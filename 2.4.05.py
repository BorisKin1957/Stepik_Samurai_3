'''Необходимо написать функцию func, которая принимает в себя целое число n и
возвращает сумму кубов в
диапазоне от 1 до заданного числа n(не включая). Нужно написать декоратор decor_1,
который записывает в словарь предыдущий аргумент декорируемой функции и ее результат,
и если функция будет вызвана повторно с тем же аргументом, то результат будет
 возвращен мгновенно. Также необходимо написать декоратор decor_2, который будет
 считать время работы функции. Возвращаться будет кортеж, где первое число -
 результат функции, второе - время работы функции. Для этого используйте функцию
 time из модуля time. Т.е. если вы запустите вашу декорируемую всеми декораторами
 функцию с аргументом, с которым она уже запускалась, то результат должен выводиться
 мгновенно и соответственно время выполнения будет минимальным.
 Нужно только написать функцию и 2 декоратора.

Пример работы:

Input:
x = decor_2(decor_1(func))
print(x(9999999))
print(x(9999999))

Output:
(2499998500000324999970000001, 1.2619938850402832)
(2499998500000324999970000001, 0.0)'''


import time


def decor_1(func):
    cache = {}

    def wrapper(n):
        if n not in cache:
            cache[n] = func(n)
        return cache[n]

    return wrapper


def decor_2(func):
    def wrapper(n):
        x_1 = time.time()
        f = func(n)
        return f, time.time() - x_1

    return wrapper


def func(n: int) -> int:
    return sum((i ** 3 for i in range(1, n)))


x = decor_2(decor_1(func))

x = decor_2(decor_1(func))
print(x(9999999))
print(x(9999999))
